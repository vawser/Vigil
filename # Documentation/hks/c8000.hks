function Event20000_onUpdate()
    if EventCommonFunction(20000) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_PhantomIdle")
    end
end

function Event20001_onUpdate()
    if EventCommonFunction(20001) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20002_onUpdate()
    if EventCommonFunction(20002) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20003_onUpdate()
    if EventCommonFunction(20003) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20004_onUpdate()
    if EventCommonFunction(20004) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20005_onUpdate()
    if EventCommonFunction(20005) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20006_onUpdate()
    if EventCommonFunction(20006) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20007_onUpdate()
    if EventCommonFunction(20007) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20008_onUpdate()
    if EventCommonFunction(20008) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20009_onUpdate()
    if EventCommonFunction(20009) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20010_onUpdate()
    if EventCommonFunction(20010) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20011_onUpdate()
    if EventCommonFunction(20011) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20012_onUpdate()
    if EventCommonFunction(20012) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20013_onUpdate()
    if EventCommonFunction(20013) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20014_onUpdate()
    if EventCommonFunction(20014) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20015_onUpdate()
    if EventCommonFunction(20015) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20016_onUpdate()
    if EventCommonFunction(20016) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20017_onUpdate()
    if EventCommonFunction(20017) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20018_onUpdate()
    if EventCommonFunction(20018) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20019_onUpdate()
    if EventCommonFunction(20019) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20020_onUpdate()
    if EventCommonFunction(20020) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20021_onUpdate()
    if EventCommonFunction(20021) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20022_onUpdate()
    if EventCommonFunction(20022) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20023_onUpdate()
    if EventCommonFunction(20023) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20024_onUpdate()
    if EventCommonFunction(20024) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20025_onUpdate()
    if EventCommonFunction(20025) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20026_onUpdate()
    if EventCommonFunction(20026) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20027_onUpdate()
    if EventCommonFunction(20027) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20028_onUpdate()
    if EventCommonFunction(20028) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20029_onUpdate()
    if EventCommonFunction(20029) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20030_onUpdate()
    if EventCommonFunction(20030) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20031_onUpdate()
    if EventCommonFunction(20031) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20032_onUpdate()
    if EventCommonFunction(20032) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20033_onUpdate()
    if EventCommonFunction(20033) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20034_onUpdate()
    if EventCommonFunction(20034) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20035_onUpdate()
    if EventCommonFunction(20035) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20036_onUpdate()
    if EventCommonFunction(20036) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20037_onUpdate()
    if EventCommonFunction(20037) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20038_onUpdate()
    if EventCommonFunction(20038) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20039_onUpdate()
    if EventCommonFunction(20039) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20040_onUpdate()
    if EventCommonFunction(20040) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20041_onUpdate()
    if EventCommonFunction(20041) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20042_onUpdate()
    if EventCommonFunction(20042) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20043_onUpdate()
    if EventCommonFunction(20043) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20044_onUpdate()
    if EventCommonFunction(20044) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20045_onUpdate()
    if EventCommonFunction(20045) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20046_onUpdate()
    if EventCommonFunction(20046) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20047_onUpdate()
    if EventCommonFunction(20047) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20048_onUpdate()
    if EventCommonFunction(20048) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20049_onUpdate()
    if EventCommonFunction(20049) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20050_onUpdate()
    if EventCommonFunction(20050) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20051_onUpdate()
    if EventCommonFunction(20051) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20052_onUpdate()
    if EventCommonFunction(20052) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20053_onUpdate()
    if EventCommonFunction(20053) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20054_onUpdate()
    if EventCommonFunction(20054) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20055_onUpdate()
    if EventCommonFunction(20055) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20056_onUpdate()
    if EventCommonFunction(20056) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20057_onUpdate()
    if EventCommonFunction(20057) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20058_onUpdate()
    if EventCommonFunction(20058) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event20059_onUpdate()
    if EventCommonFunction(20059) == TRUE then
        return
    elseif TRUE == env(IsAnimEnd, 1) then
        Fire("W_Idle")
    end
end

function Event30000_onUpdate()
    if EventCommonFunction(30000) == TRUE then
    end
end

function Event30001_onUpdate()
    if EventCommonFunction(30001) == TRUE then
    end
end

function Event30002_onUpdate()
    if EventCommonFunction(30002) == TRUE then
    end
end

function Event30003_onUpdate()
    if EventCommonFunction(30003) == TRUE then
    end
end

function Event30004_onUpdate()
    if EventCommonFunction(30004) == TRUE then
    end
end

function Event30005_onUpdate()
    if EventCommonFunction(30005) == TRUE then
    end
end

function Event30006_onUpdate()
    if EventCommonFunction(30006) == TRUE then
    end
end

function Event30007_onUpdate()
    if EventCommonFunction(30007) == TRUE then
    end
end

function Event30008_onUpdate()
    if EventCommonFunction(30008) == TRUE then
    end
end

function Event30009_onUpdate()
    if EventCommonFunction(30009) == TRUE then
    end
end

function Event30010_onUpdate()
    if EventCommonFunction(30010) == TRUE then
    end
end

function Event30011_onUpdate()
    if EventCommonFunction(30011) == TRUE then
    end
end

function Event30012_onUpdate()
    if EventCommonFunction(30012) == TRUE then
    end
end

function Event30013_onUpdate()
    if EventCommonFunction(30013) == TRUE then
    end
end

function Event30014_onUpdate()
    if EventCommonFunction(30014) == TRUE then
    end
end

function Event30015_onUpdate()
    if EventCommonFunction(30015) == TRUE then
    end
end

function Event30016_onUpdate()
    if EventCommonFunction(30016) == TRUE then
    end
end

function Event30017_onUpdate()
    if EventCommonFunction(30017) == TRUE then
    end
end

function Event30018_onUpdate()
    if EventCommonFunction(30018) == TRUE then
    end
end

function Event30019_onUpdate()
    if EventCommonFunction(30019) == TRUE then
    end
end

function Event30020_onUpdate()
    if EventCommonFunction(30020) == TRUE then
    end
end

function Event30021_onUpdate()
    if EventCommonFunction(30021) == TRUE then
    end
end

function Event30022_onUpdate()
    if EventCommonFunction(30022) == TRUE then
    end
end

function Event30023_onUpdate()
    if EventCommonFunction(30023) == TRUE then
    end
end

function Event30024_onUpdate()
    if EventCommonFunction(30024) == TRUE then
    end
end

function Event30025_onUpdate()
    if EventCommonFunction(30025) == TRUE then
    end
end

function Event30026_onUpdate()
    if EventCommonFunction(30026) == TRUE then
    end
end

function Event30027_onUpdate()
    if EventCommonFunction(30027) == TRUE then
    end
end

function Event30028_onUpdate()
    if EventCommonFunction(30028) == TRUE then
    end
end

function Event30029_onUpdate()
    if EventCommonFunction(30029) == TRUE then
    end
end

function GetDeltaTime()
    return env(ObtainedDT) / 1000
end

function ConvergeValue(target_val, cur_val, max_inc, max_dec)
    local ret = target_val
    if target_val == cur_val then
        return ret
    end
    local dT = GetDeltaTime()
    local gap = math.abs(target_val - cur_val)
    local add_val = 0
    if cur_val < target_val then
        add_val = math.abs(max_inc * dT)
    elseif target_val < cur_val then
        add_val = -1 * math.abs(max_dec * dT)
    end
    if add_val < gap then
        ret = cur_val + add_val
        if add_val > 0 then
            if target_val < ret then
                ret = target_val
            end
        elseif ret < target_val then
            ret = target_val
        end
    end
    return ret
end

function Move_onGenerate()
    local turnangle = GetVariable("TurnAngle")
    local internaloffset = GetVariable("InternalOffset")
    local offset_multiplier = nil
    
    if math.abs(turnangle) <= 1 then
        offset_multiplier = 1
    elseif math.abs(turnangle) <= 2.5999999046325684 then
        offset_multiplier = 1.2999999523162842
    else
        offset_multiplier = 2
    end
    
    local maxoffset = 0.10000000149011612 * offset_multiplier
    local minoffset = -0.10000000149011612 * offset_multiplier
    local target_val = 0
    
    if math.abs(turnangle) <= 0.20000000298023224 then
        target_val = 0
    elseif turnangle > 0.20000000298023224 then
        target_val = minoffset
    elseif turnangle < -0.20000000298023224 then
        target_val = maxoffset
    end
    
    local offset = ConvergeValue(target_val, internaloffset, 0.30000001192092896, 0.30000001192092896)
    local rootpos_pose_modelspace = hkbGetBoneModelSpace("Root")
    local rootpos_pose_localspace = hkbGetBoneLocalSpace("Root")
    local quat = rootpos_pose_localspace:getRotation() / rootpos_pose_modelspace:getRotation()
    local offset_vec = hkVector4.new(1, 0, 0, 0)
    offset_vec:setRotatedDir(quat, offset_vec)
    offset_vec = offset_vec * offset
    local rootpos_translation_localspace = rootpos_pose_localspace:getTranslation() + offset_vec
    rootpos_pose_localspace:setTranslation(rootpos_translation_localspace)
    hkbSetBoneLocalSpace("Root", rootpos_pose_localspace)
    SetVariable("RollTwistAngle", offset * 60)
    SetVariable("YawTwistAngle", offset * 340)
    SetVariable("InternalOffset", offset)
    SetVariable("YawTwistAngle_Twistroot", offset * 340 / 4)
end

------------------------
-- Conditions 
-- env( <condition>, <args> )
-- *<args> are optional
------------------------
IsGeneralAnimEnd = 0
IsAttackAnimEnd = 1
AnimIDOffset = 9
AdditiveBlendAnim = 10
AdditiveBlendAnimOfSlot = 11

IsAtkRequest = 100 -- args: <attack request index>
IsAtkReleaseRequest = 101
IsChainAtkRequest = 102
GetAtkDuration = 103
GetWeaponSwitchRequest = 104
GetCommandIDFromEvent = 105
GetAIActionType = 106
GetAIChainActionType = 107
GetChainEvadeRequest = 108
GetWeaponChangeRequest = 109
GetAnimIDFromMoveParam = 110
IsThereAnyAtkRequest = 111
IsThereAnyChainAtkRequest = 112
IsItemUseMenuOpening = 113
IsMagicUseMenuOpening = 114
IsItemUseMenuOpened = 115
IsMagicUseMenuOpened = 116
GetBlendAnimIDFromMoveParam = 117
GetAIChainStepType = 118
GetTransitionToSpecialStayAnimID = 119
GetAIAtkCancelType = 120
GetWeaponCancelType = 121 -- args: <hand index>
IsWeaponCancelPossible = 122 
GetAIDefenseCancelType = 123
GetAIVersusBackstabCancelType = 124

IsFalling = 200
IsLanding = 201
GetReceivedDamageType = 202
IsActiveActionValid = 203
GetActionEventNumber = 204
IsNormalDmgPassThroughDuringThrow = 205
IsThrowing = 206
GetWeaponSwitchState = 207
IsEquipmentSwitchPossible = 209
IsAnimCancelPossibleInAtkRelease = 210
IsEmergencyStopAnimPlaying = 211
GetLockRangeState = 212
GetLockAngleState = 213
IsAnimCancelPossibleInDamageHit = 214
IsChangeToScrapeAtk = 215
IsChangeToDeflectAtk = 216
IsChangeToAfterParrySuccess = 217
IsChangeFromNormalToBigAtk = 218
GetMovementType = 219
IsLargeAtkComboPossible = 220
IsMapActionPossible = 221
GetReceivedDamageDirection = 222
GetMapActionID = 223
GetFallHeight = 224
GetEquipWeaponCategory = 225 -- args: <hand index>
IsHoldingBow = 226
GetMagicAnimType = 227
WasNotLargeAtk = 228
IsBackAtkPossible = 229
IsAfterParryAtkPossible = 230
GetItemAnimType = 231
IsMagicUseable = 232 -- args: <hand index>, <unknown index>
IsItemUseable = 233
IsPrecisionShoot = 234
IsFireDamaged = 235
GetDamageLevel = 236
GetGuardLevelAction = 237
IsNewLeftHandAtkFromStay = 238
IsParryFromIdle = 239
IsGuardFromIdle = 240
IsNewLeftHandAtkFromAtkCancel = 241
IsParryFromAtkCancel = 242
IsGuardFromAtkCancel = 243
IsTiedUp = 244
IsOutOfAmmo = 245 -- args: <slot index> # 1 is left slot, 0 is right slot
IsUseCatLanding = 246
GetHoverMoveState = 247
IsTruelyLanding = 248
IsRightHandMagic = 249
IsChangeToSpecialStayAnim = 250
GetSpecialStayAnimID = 251
AcquireSpecialDamageAnimationID = 252
IsRunTurnAnimPlaying = 253
IsGenerateAction = 254
GetSpecialStayCancelAnimID = 255
HasReceivedAnyDamage = 256
GetMoveAnimParamID = 257
GetGuardLevel = 258
IsRequestTurnAnimStart = 259
IsTurningWithAnim = 260
IsFlying = 261
IsAbilityInsufficient = 262 -- args: <hand index>
GetEquipWeightRatioForFalling = 263
GetFlightMotionState = 264
GetIsWeakPoint = 265
GetMoveAnimBlendRatio = 266
GetLadderActionState = 267
IsInDisguise = 268
IsCoopWait = 269
IsCoop = 270
IsSpecialTransitionPossible = 271
GetLandingAnimBlendRatio = 272
GetThrowAnimID = 273
DidOpponentDieFromThrow = 274
HasThrowEnded = 275
IsThrowSelfDeath = 276
IsThrowSuccess = 277
GetGuardMotionCategory = 278 -- args: <hand index>
IsBeingThrown = 279
IsSelfThrow = 280
IsThrowDeathState = 281
GetNewLockState = 282
IsOnLadder = 283
GetPhysicalAttribute = 284
GetSpecialAttribute = 285
GetSpecialStayDeathAnimID = 286
HasReceivedAnyDamage_AnimEnd = 287
EggGrowth_IsHeadScratch = 288
EggGrowth_IsBecomeEggHead = 289
IsStop = 290
IsSomeoneOnLadder = 291 -- args: <check distance>, <unknown index>
IsSomeoneUnderLadder = 292 -- args: <check distance>, <unknown index>
GetLadderHandState = 293
DoesLadderHaveCharacters = 294 -- args: <check distance>, <unknown index>, <unknown index>
IsLadderRightHandStayState = 295
IsDescendingToFloor = 296
IsInputDirectionMatch = 297
IsSpecialTransition2Possible = 298
IsVersusDivineDamage = 299

IsGeneralAnimCancelPossible = 300
GetEventEzStateFlag = 301 -- args: <EzState command id>
IsLadderEventEnd = 302
IsReachBottomOfLadder = 303
IsReachTopOfLadder = 304
GetStateChangeType = 305 -- args: <state change id>
IsOnLastRungOfLadder = 306
GetWeaponDurability = 311
IsWeaponBroken = 312
IsAnimEndBySkillCancel = 313
EggGrowth_IsBecomeEgghead_SecondStage = 314
IsHamariFallDeath = 315 -- args: <unknown index>
IsClient = 316
IsSlope = 317
IsSwitchState = 318
IsPressUpKey = 319
IsSpecialTurning = 320
GetIntValueForTest = 321
IsObjActInterpolatedMotion = 322
GetObjActTargetDirection = 323
GetObjActRemainingInterpolateTime = 324
IsGap = 325
GetWeaponID = 326 -- args: <hand index>
IsMovingLaterally = 327
IsNet = 328
HasBrokenSA = 329
IsEmergencyQuickTurnActivated = 330
IsDoubleChantPossible = 331
IsAnimOver = 332
ObtainedDT = 333
GetBehaviorID = 334 -- args: <hand index>
IsTwoHandPossible = 335 -- args: <hand index>
IsPartDamageAdditiveBlendInvalid = 336
IsThrowPosRealign = 337
GetBoltLoadingState = 338 -- args: <slot index>
IsAnimEnd = 339 -- args: <unknown index>
IsTwinSwords = 340 -- args: <hand index>
GetTurnAngleForDelayedTurn = 341
GetThrowDefenseCount = 342
IsEmergencyEvasionPossible = 343 -- args: <unknown index>
HasEnoughArtsPoints = 344 -- args: <button index>, <hand index>
GetEquipWeaponSpecialCategoryNumber = 345 -- args: <hand index>
CheckForEventAnimPlaybackRequest = 346
IsFemale = 347
GetDelayTurnAngleDifference = 348
IsDamageMotionOff = 349
HasReachedStatsNeededForWeapon = 350 -- args: <hand index>  -- Checks for the attainmentWepStatus fields in EquipParamWeapon
UpperArmControlOuterAngle = 351
UpperArmControlTopAndBottomAngle = 352
CompleteLadderSlideDown = 353
GetLadderRungCount = 354
GetNumberOfRungsBelowOnLadder = 355
GetBowAndArrowSlot = 356
GetWeaponStorageSpotType = 357 -- args: <hand index>
GetStayAnimCategory = 358
GetWeaponSwitchStatus = 359
IsEquipmentMenuOpen = 360
GetRemainingArrowCount = 361
GetSpEffectType = 362 -- args: <unknown>
Unknown363 = 363
GetEventID = 364
Unknown365 = 365
GetSpiritspringJumpHeight = 366
Unknown368 = 368

GetPoise = 400
GetMaxPoise = 402
GetSpEffectEventAnimID = 403
Unknown404 = 404
Unknown405 = 405
GetRollAngle = 406
GetJumpAngle = 407
GetSwordArtsRollAngle = 408
GetDamageSpecialAttribute = 409 -- args: <index>

IsOnMount = 500
Unknown502 = 502
IsSummoningRide = 504
IsMovingOnMount = 505
IsIdleOnMount = 506
GetMountReceivedDamageDirection = 522 -- args: <unknown>
GetMountDamageLevel = 530
GetMountRecievedDamageAngle = 533
GetMountRecievedDamageType = 534
HasMountReceivedAnyDamage = 535
IsMountFalling = 537
GetMountFallHeight = 538
IsMountInFallLoop = 539
IsMountTrulyLanding = 540
GetMountSpecialAttribute = 543
IsMountDead = 545
GetMountIsWeakPoint = 546
Unknown547 = 547
Unknown548 = 548
GetMountSpEffectID = 549
GetMountSpEffectType = 550
GetMountStateInfo = 551
Unknown552 = 552
GetMountBehaviorID = 553
GetMountStatusEffect = 554
Unknown555 = 555

GetFlyRouteState = 600

Unknown700 = 700
Unknown701 = 701

GetHP = 1000
GetStamina = 1001
IsGhost = 1002
GetRandomInt = 1003
GetRandomFloat = 1004
IsUnableToDie = 1005
IsResurrectionPossible = 1006
IsCOMPlayer = 1007
GetAITargetAwareState = 1008
IsAIChangeToAwareState = 1009
GetAITargetAwareStatePreviousFrame = 1010

GetTestDamageAnimID = 1100
IsInvincibleDebugMode = 1101
WasGameLaunchedInPGTestMode = 1102
IsTiltingStick = 1103
GetGestureRequestNumber = 1104
IsStayState = 1105
ActionRequest = 1106 -- args: <action arm index>
ActionCancelRequest = 1107 -- args: <action arm index>
ActionDuration = 1108 -- args: <action arm index>
HasActionRequest = 1109
MovementRequest = 1110
MovementRequestDuration = 1111
HasThrowRequest = 1112
IsGuardCancelPossible = 1113
DoesAnimExist = 1114 -- args: <anim id>, *<anim id>
GetAIMovementType = 1115
GetSpEffectID = 1116
IsConversationEnd = 1117
IsLocked = 1118
GetAtkDirection = 1119
GetPartGroup = 1120
GetKnockbackDistance = 1121

IsMoveCancelPossible = 2000
GetSpecialMovementType = 2002
GetGeneralTAEFlag = 2003 -- args: <flag>
IsSwingHitTarget = 2004
GetCeremonyState = 2005
GetSuccessiveGuardCount = 2006
GetMinLuck = 2007
GetAccumulatedLuck = 2008
GetMaxLuck = 2009
GetMaxStamina = 2010
GetGeneralMSBParameter = 2011
IsHitWall = 2012
GetSafetyDirection = 2013
IsInCeremony = 2014
IsDoingCorpseCarryKeyframe = 2015
GetFP = 2016
IsCeremonyComplete = 2017
IsCeremonyInterrupt = 2018

IsSpeaking = 3000
GetTalkID_3001 = 3001
GetTalkID_3002 = 3002

------------------------
-- Commands
-- act( <command>, <args> )
-- *<args> are optional
------------------------
ChangeGeneralAnim = 0
ChangeUpperBodyAnim = 1
ChangeStayAnim = 2
ChangeGeneralAnimCategorized = 3 -- args: <anim category>, <anim id>, <layer index>, <blend>, <isLoop>
ChangeUpperBodyAnimCategorized = 4
ChangeGeneralAnimAdditiveCategorized = 5
ChangeUpperBodyAnimAdditiveCategorized = 6
ChangeGeneralAnimCategorizedMatchPlaybackTime = 7
ChangeUpperBodyAnimCategorizedMatchPlaybackTime = 8
SetAnimIDOffset = 9
SetAdditiveBlendAnimation = 10
SetAdditiveBlendAnimationSlotted = 11
ChangeBlendAnimationCategorized = 12
ChangeUpperAndLowerBodySyncedAnimCategorized = 13

SetActiveActionState = 100
SwitchMotion = 101 -- args: <bool> 
SetAllowedThrowAttackType = 102 -- args: <index> # ENUM: THROW_STATE
SetAllowedThrowDefenseType = 103 -- args: <index> # ENUM: THROW_STATE
SwitchEquippedWeapon = 104
SetReadyForAtkFinish = 105
SetEquipmentChangeable = 106
SetUnableToFall = 107
SendMessageIDToEvents = 108 -- args: <event call>
SetAttackType = 109 -- args: <index> # -1
SetStaminaRecoveryDisabled = 110
SetAIBusyDoingAction = 111
BowTurn = 112
SetBowStance = 113
SetPreciseAimMode = 114
SetSpecialMovement = 115
SetIsWeaponChanging = 116
SetIsItemInUse = 117 -- args: <bool>
SetIsMagicInUse = 118 -- args: <bool>
SetHoverState = 119
RemoveBinoculars = 120
ChangeToSpecialStay = 121
SetIsHeadTurnPossible = 122
OpenMenuWhenUsingItem = 123
OpenMenuWhenUsingMagic = 124 -- args: <action arm index>
BlowDamageTurn = 125
SetDeathStay = 126 -- args: <bool> # TRUE, FALSE
CloseMenuWhenUsingItem = 127
CloseMenuWhenUsingMagic = 128
DisallowAdditiveTurning = 129 -- args: <bool>
ChangeFlightStatus = 130
ShowFixedYAxisDirectionDisplay = 131
WhiffPossibility = 132
SetLadderActionState = 133 -- args: <index>
SetInsufficientStrengthAnimID = 134
ForceCancelThrowAnim = 135
SetThrowState = 136 -- args: <index> # ENUM: THROW_TYPE
StartSlidingDownLadder = 137
SetIsEventActionPossible = 138 -- args: <bool>
RequestThrowAnimInterrupt = 139
SetHandStateOfLadder = 140
SetDamageAnimType = 141 -- args: <index> # ENUM: DAMAGE_FLAG
DownwardSlideTurn = 142 -- args: <index>
InterruptAttack = 143
SkyDeathWarp = 144
ClearSlopeInfo = 145
ReceiveStateInput = 146
SetIsEquipmentChangeableFromMenu = 147
SetHavokVariable = 148 -- args: <string>, <value>
AimAtSelfPosition = 149
SetIsItemAnimationPlaying = 150
DoAIReplanningAtCancelTiming = 151
DenyEventAnimPlaybackRequest = 152
InvokeBackstab = 153
WeaponParameterReference = 154 -- args: <hand index>
AINotifyAttackType = 155 -- args: <index>
SetAutoCaptureTarget = 156
ClearAutoCaptureTarget = 157
RequestAIReplanning = 158
TurnTowardAttacker = 159
SetThrowPossibilityState_Attacker = 160 -- args: <index>
SetThrowPossibilityState_Defender = 161 -- args: <index>
MarkOfGreedyPersonSlipDamageDisable = 162
Unknown163 = 163

StateIdentifier = 200

ChangeHP = 1000 -- args: <value>
ChangeStamina = 1001 -- args: <value> # ENUM: STAMINA_REDUCE

SyncAtInit_Active = 1100
SyncAtInit_Passive = 1101

SetMovementScaleMult = 2001 -- args: <value>
AddSpEffect = 2002 -- args: <id>
SetFastStealthThrowEnabled = 2003
SetTurnSpeed = 2004 -- args: <degrees>
SetCeremonyState = 2005
SetDamageMotionBlendRatio = 2006 -- args: <value>
SetForceTurnTarget = 2007
ForceTurn = 2008
SpecialTurn = 2009
SetInSpecialGuard = 2010
SetWeaponCancelType = 2011 -- args: <index>
SetIsPreciseShootingPossible = 2012
ChooseBowAndArrowSlot = 2013 -- args: <slot index> # 0, 1
Set4DirectionMovementThreshold = 2014 -- args: <front right angle>, <front left angle>, <back left angle>, <back right angle> #
LockonSystemUnableToTurnAngle = 2015 -- args: <angle>, <angle>
ReserveArtsPointsUse = 2016 -- args: <button index>, <hand index>
SetArtsPointFEDisplayState = 2017 -- args: <value> # 0, 1
LockonFixedAngleCancel = 2018
TurnToLockonTargetImmediately = 2019 -- args: *<value>
SetSpecialInterpolation = 2020 -- args: <value>, <bool>
LadderSlideDownCancel = 2021
DisableMagicIDSwitching = 2022
DisableToolIDSwitching = 2023
UseItemDecision = 2024
Unknown2025 = 2025 -- args: <value>
Unknown2026 = 2026
Unknown2027 = 2027
Unknown2029 = 2029 -- args: <value>
ChangeBuddyState = 2030
PlayEventSync = 2031
Unknown2040 = 2040
Unknown2050 = 2050 -- args: <index>, <index> # IDX_AINOTE_STATETYPE, IDX_AINOTE_STATETYPE

Unknown3000 = 3000
Unknown3001 = 3001
Unknown3002 = 3002
PlayRideAnim = 3003
ApplyRideBlend = 3004 -- args: <blend anim>, <rate>
Unknown3005 = 3005
Unknown3006 = 3006
ApplyDamageFlag = 3007 -- args: <index>

Unknown4000 = 4000
Unknown4001 = 4001
Unknown4002 = 4002

DebugLogOutput = 9000
Test_SpEffectDelete = 9001
Test_SpEffectTypeSpecifyDelete = 9002
MarkerStart = 9003
MarkerEnd = 9004

Wait = 9100
ResetInputQueue = 9101
SetIsEventAnim = 9102
SetAIAttackState = 9103 -- args: <index>
SetIsTurnAnimInProgress = 9104
SetTurnAnimCorrectionRate = 9105 -- args: <degrees>

Unknown9999 = 9999 -- args: <value> # 1, 2, 3

------------------------------------------
-- Must be last for the global variables to be read
------------------------------------------
global = {["__index"] = function (table, element)
    return dummy
end}

function dummy()
end

setmetatable(_G, global)
